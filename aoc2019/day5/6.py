import copy

nums = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,90,64,225,1101,15,56,225,1,14,153,224,101,-147,224,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,2,162,188,224,101,-2014,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1001,18,81,224,1001,224,-137,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,16,16,224,101,-256,224,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,101,48,217,224,1001,224,-125,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1002,158,22,224,1001,224,-1540,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,83,31,225,1101,56,70,225,1101,13,38,225,102,36,192,224,1001,224,-3312,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1102,75,53,225,1101,14,92,225,1101,7,66,224,101,-73,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,77,60,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,404,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,1107,226,226,224,1002,223,2,223,1005,224,464,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,479,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,509,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,524,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,8,226,677,224,102,2,223,223,1005,224,584,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,614,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,107,677,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]

#nums = [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
#1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
#999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]

def do_op(i):
    # returns -1 if done, otherwise pointer to next instruction.
    args = []
    opstr = str(nums[i]).zfill(5)
    immediate = [bool(int(x)) for x in [opstr[2], opstr[1], opstr[0]]]
    op = int(opstr[3:])

    if op == 99:
        return -1

    # build input
    if op in [1, 2]:
        args = []
        for j in [1, 2]:
            if immediate[j-1]:
                args.append(nums[i+j])
            else:
                args.append(nums[nums[i+j]])
        args.append(nums[i+3])
    elif op == 3:  # build args for opcode 3 or 4
        args.append(nums[i + 1])
    elif op == 4:
        if immediate[0]:
            args.append(nums[i+1])
        else:
            args.append(nums[nums[i+1]])
    elif op in [5, 6]:
        if immediate[0]:
            args.append(nums[i+1])
        else:
            args.append(nums[nums[i+1]])
        if immediate[1]:
            args.append(nums[i+2])
        else:
            args.append(nums[nums[i+2]])
    elif op in [7, 8]:
        for j in [1, 2]:
            if immediate[j-1]:
                args.append(nums[i+j])
            else:
                args.append(nums[nums[i+j]])
        args.append(nums[i + 3])

    # execute
    if op == 1:
        dest = args[2]
        nums[dest] = args[0]+args[1]
        return i+4
    if op == 2:
        dest = args[2]
        nums[dest] = args[0]*args[1]
        return i+4
    if op == 3:
        n = int(input("number plz: "))
        nums[args[0]] = n
        return i+2
    if op == 4:
        print("OUTPUT:", args[0])
        return i+2
    if op == 5:
        # jump if true
        if bool(args[0]):
            return args[1]
        else:
            return i+3
    if op == 6:
        # jump if false
        if bool(args[0]):
            return i+3
        else:
            return args[1]
    if op == 7:
        # less than
        if args[0] < args[1]:
            nums[args[2]] = 1
        else:
            nums[args[2]] = 0
        return i+4
    if op == 8:
        #equal
        if args[0] == args[1]:
            nums[args[2]] = 1
        else:
            nums[args[2]] = 0
        return i+4

    print("BAD OPCODE", opstr)


def run():
    i = 0
    while i != -1:
        i = do_op(i)


run()